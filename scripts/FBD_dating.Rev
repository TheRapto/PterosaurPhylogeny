###FBD model for fossilised birth-death proces###

#Setting up three key parameters: Speciation, extinction and fossil sampling
#For this time they are considered constant
speciation_rate ~ dnExponential(10)
extinction_rate ~ dnExponential(10)
fossil_samp_rate ~ dnExponential(10)

#Specifying the moves of the parameters
moves.append( mvScale(speciation_rate, lambda = 0.5, tune = true, weight = 3.0) )
moves.append( mvScale(extinction_rate, lambda = 0.5, tune = true, weight = 3.0) )
moves.append( mvScale(fossil_samp_rate, lambda = 0.5, tune = true, weight = 3.0) )

#Setting up deterministic variable for diversification & turnover
diversification := speciation_rate - extinction_rate
turnover := extinction_rate/speciation_rate

#Defining the probability of extant species sampling
#This is 1 as we have all extant bears
rho <- 1.0

#Setting the aproximate age of the clade:
# prior and move on the origin
origin_time ~ dnUnif(37.0, 55.0)
moves.append( mvSlide(origin_time, weight=1.0) )

#Specifying the FBD model
tree ~ dnFBDP(lambda = speciation_rate, mu = extinction_rate, psi = fossil_samp_rate, rho = rho, origin = origin_time, taxa = taxa)

# moves to search tree space
moves.append( mvFNPR(tree, weight = 15.0) )
moves.append( mvCollapseExpandFossilBranch(tree, origin_time, weight = 6.0) )
moves.append( mvNodeTimeSlideUniform(tree, weight = 40.0) )
moves.append( mvRootTimeSlideUniform(tree, origin_time, weight = 5.0) )

#Constraining the clade containg extant bears
clade_extant = clade("Ailuropoda_melanoleuca","Tremarctos_ornatus","Melursus_ursinus",
                    "Ursus_arctos","Ursus_maritimus","Helarctos_malayanus",
                    "Ursus_americanus","Ursus_thibetanus")
age_extant := tmrca(tree, clade_extant)

#Deterministic variable to monitor amount of sampled ancestors
num_samp_anc := tree.numSampledAncestors()

##Accounting for age uncertaincy##

#A For-loop to give each fossil a age uncertainty
fossils = tree.getFossils()

for(i in 1:fossils.size())
{
    t[i] := tmrca(tree, clade(fossils[i]))

    a_i = fossils[i].getMinAge()
    b_i = fossils[i].getMaxAge()

    F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
    F[i].clamp( 0 )
}

# moves on fossil ages
moves.append( mvFossilTimeSlideUniform(tree, origin_time, weight = 5.0) )

